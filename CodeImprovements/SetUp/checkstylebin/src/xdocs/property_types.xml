<?xml version="1.0" encoding="ISO-8859-1"?>

<document>

  <properties>
    <title>Property Types</title>
    <author>Oliver Burn</author>
  </properties>

  <body>

    <p>
      Checkstyle is configured using properties, which are string
      representations. This document describes how these string
      representations are mapped to typed properties.
    </p>

    <section name="integer">
      <p>
        This property represents an integer. The string representation is
        parsed using the <span class="code">java.lang.Integer</span> class.
      </p>
    </section>

    <section name="string">
      <p>
        This property represents a string. The literal string representation
        is used.
      </p>
    </section>

    <section name="boolean">
      <p>
        This property represents a boolean. The default value is <span
        class="code">false</span>. The following string representations will
        map to <span class="code">true</span>:
      </p>

      <ul>
        <li><span class="code">yes</span></li>
        <li><span class="code">true</span></li>
        <li><span class="code">on</span></li>
      </ul>

      <p>Anything else will map to <span class="code">false</span>.</p>
    </section>

    <section name="stringSet">
      <p>
        This property represents a set of strings. The string representation
        is parsed as a set of comma (',') separated strings.
      </p>
    </section>

    <section name="intSet">
      <p>
        This property represents a set of integers. The string representation
        is parsed as a set of comma (',') separated integers that are parsed
        using the <span class="code">java.lang.Integer</span> class.
      </p>
    </section>

    <section name="regexp">
      <p>
        This property represents a regular expression. The string
        representation is parsed using <a
        href="http://java.sun.com/j2se/1.4.2/docs/api/java/util/regex/package-summary.html">java.util.regex
        package</a>.
      </p>
    </section>

    <section name="parenPad">
      <p>
        This property represents the policy for padding with white space. The
        following table describes the valid options:
      </p>

      <table summary="padding options">
        <tr>
          <td>Option</td>
          <td>Definition</td>
        </tr>
        <tr>
          <td><span class="code">nospace</span></td>
          <td>
            Do not pad. For example, <span class="code">method(a, b);</span>
          </td>
        </tr>
        <tr>
          <td><span class="code">space</span></td>
          <td>
            Ensure padding. For example,
            <span class="code">method( a, b );</span>
          </td>
        </tr>
      </table>
    </section>

    <section name="wrapOp">
      <p>
        This property represents the policy for wrapping lines on
        operators. The following table describes the valid options:
      </p>

      <table summary="wrap operator options">
        <tr>
          <td>Option</td>
          <td>Definition</td>
        </tr>
        <tr>
          <td><span class="code">nl</span></td>
          <td>
            The operator must be on a new line. For example:
            <pre>
    someVariable = aBigVariableNameToMakeThings + "this may work"
                   + lookVeryInteresting;
            </pre>
          </td>
        </tr>
        <tr>
          <td><span class="code">eol</span></td>
          <td>
            The operator must be at the end of the line. For example:
            <pre>
    someVariable = aBigVariableNameToMakeThings + "this may work" +
                   lookVeryInteresting;
            </pre>
          </td>
        </tr>
      </table>
    </section>

    <section name="block">
      <p>
        This property represents the policy for checking block statements. The
        following table describes the valid options:
      </p>

      <table summary="block options">
        <tr>
          <td>Option</td>
          <td>Definition</td>
        </tr>
        <tr>
          <td><span class="code">text</span></td>
          <td>
            Require that there is some text in the block. For example:
            <pre>
    catch (Exception ex) {
        // This is a bad coding practice
    }
            </pre>
          </td>
        </tr>
        <tr>
          <td><span class="code">stmt</span></td>
          <td>
            Require that there is a statement in the block. For example:
            <pre>
    finally {
        lock.release();
    }
            </pre>
          </td>
        </tr>
      </table>
    </section>

    <section name="lcurly">
      <p>
        This property represents the policy for checking the placement of a
        left curly brace (<span class="code">'{'</span>). The following table
        describes the valid options:
      </p>

      <table summary="left curly options">
        <tr>
          <td>Option</td>
          <td>Definition</td>
        </tr>

        <tr>
          <td><span class="code">eol</span></td>
          <td>
            The brace must always be on the end of the line. For example:
            <pre>
    if (condition) {
        ...
            </pre>
          </td>
        </tr>

        <tr>
          <td><span class="code">nl</span></td>
          <td>
            The brace must always be on a new line. For example:
            <pre>
    if (condition)
    {
        ...
            </pre>
          </td>
        </tr>

        <tr>
          <td><span class="code">nlow</span></td>
          <td>
            If the brace will fit on the first line of the statement, taking
            into account maximum line length, then apply <span
            class="code">eol</span> rule. Otherwise apply the <span
            class="code">nl</span> rule. <span class="code">nlow</span> is a
            mnemonic for "new line on wrap". For the example above Checkstyle
            will enforce:
            <pre>
    if (condition) {
        ...
            </pre>
            But for a statement spanning multiple lines, Checkstyle will
            enforce:
            <pre>
    if (condition1 &amp;&amp; condition2 &amp;&amp;
        condition3 &amp;&amp; condition4)
    {
        ...
            </pre>
          </td>
        </tr>
      </table>
    </section>

    <section name="rcurly">
      <p>
        This property represents the policy for checking the placement of a
        right curly brace (<span class="code">'}'</span>). The following table
        describes the valid options:
      </p>

      <table summary="right curly options">
        <tr>
          <td>Option</td>
          <td>Definition</td>
        </tr>

        <tr>
          <td><span class="code">same</span></td>
          <td>
            The brace must be on the same line as the next statement. For
            example:
            <pre>
    try {
        ...
    } finally {
            </pre>
          </td>
        </tr>

        <tr>
          <td><span class="code">alone</span></td>
          <td>
            The brace must be alone on the line. For example:
            <pre>
    try {
        ...
    }
    finally {
            </pre>
          </td>
        </tr>
      </table>
    </section>

    <section name="scope">
      <p>This property represents a Java scope. The scope is treated
      inclusevly (as javadoc does): 'package' means all 'package', 'protected'
      and 'public' methods/fields/classes. The valid options are:</p>

      <ul>
        <li><span class="default">nothing</span></li>
        <li><span class="default">public</span></li>
        <li><span class="default">protected</span></li>
        <li><span class="default">package</span></li>
        <li><span class="default">private</span></li>
        <li><span class="default">anoninner</span></li>
      </ul>
    </section>

    <section name="severity">
      <p>
        This property represents the severity level of a check violation. The
        valid options are:
      </p>

      <ul>
        <li><span class="default">ignore</span></li>
        <li><span class="default">info</span></li>
        <li><span class="default">warning</span></li>
        <li><span class="default">error</span></li>
      </ul>
    </section>

    <section name="importOrder">
      <p>
        This property represents the policy for checking imports order.
        The following table describes the valid options:
      </p>

      <table summary="import order options">
        <tr>
          <td>Option</td>
          <td>Definition</td>
        </tr>

        <tr>
          <td><span class="code">top</span></td>
          <td>All static imports are at the top. For example:
              <pre>
    import static a.b.C.*;
    import static x.y.Z.*;

    import a.b.D;
    import x.y.Z;</pre>
          </td>
        </tr>

        <tr>
          <td><span class="code">above</span></td>
          <td>All static imports are above the local group. For example:
            <pre>
    import static a.b.C.*;
    import a.b.D;

    import static x.y.Z.*;
    import x.y.Z;</pre>
          </td>
        </tr>

        <tr>
          <td><span class="code">inflow</span></td>
          <td>All static imports are processed like non static
              imports. For example:
              <pre>
    import static a.b.C.*;
    import a.b.D;

    import x.y.Z;
    import static x.y.Z.*;</pre>
          </td>
        </tr>

        <tr>
          <td><span class="code">under</span></td>
          <td>All static imports are under the local group. For example:
              <pre>
    import a.b.D;
    import static a.b.C.*;

    import x.y.Z;
    import static x.y.Z.*;</pre>
          </td>
        </tr>

        <tr>
          <td><span class="code">bottom</span></td>
          <td>All static imports are at the bottom. For example:
              <pre>
    import a.b.D;
    import x.y.Z;

    import static a.b.C.*;
    import static x.y.Z.*;</pre>
          </td>
        </tr>
      </table>
    </section>


    <section name="elementStyle">
      <p>
        This property represents the policy for the styles for defining
        elements in an annotation. The following table
        describes the valid options:
      </p>

      <table summary="elementStyle options">
        <tr>
          <td>Option</td>
          <td>Definition</td>
        </tr>

        <tr>
          <td><span class="code">expanded</span></td>
          <td>
            The expanded version is sometimes referred to as "named parameters"
            in other languages. Example:
            <pre>@SuppressWarnings(value={"unchecked","unused",})</pre>
          </td>
        </tr>

        <tr>
          <td><span class="code">compact</span></td>
          <td>
            This style can only be used when there is an element called 'value'
            which is either the sole element or all other elements have default
            values. Examples:
            <pre>@SuppressWarnings({"unchecked","unused",})</pre>
            and:
            <pre>@SuppressWarnings("unchecked")</pre>
          </td>
        </tr>

        <tr>
          <td><span class="code">compact_no_array</span></td>
          <td>
            It is similar to the <span class="code">compact</span> style but
            single value arrays are flagged. With annotations a single value
            array does not need to be placed in an array initializer.
            This style can only be used when there is an element called 'value'
            which is either the sole element or all other elements have
            default values.
            Example: <pre>@SuppressWarnings("unchecked")</pre>
          </td>
        </tr>

        <tr>
          <td><span class="code">ignore</span></td>
          <td>
            Anything goes.
          </td>
        </tr>
      </table>
    </section>


    <section name="closingParens">
      <p>
        This property represents the policy for the styles for the ending
        parenthesis. The following table describes the valid options:
      </p>

      <table summary="closingParens options">
        <tr>
          <td>Option</td>
          <td>Definition</td>
        </tr>

        <tr>
          <td><span class="code">always</span></td>
          <td>
            Example:
            <pre>@Deprecated()</pre>
          </td>
        </tr>

        <tr>
          <td><span class="code">never</span></td>
          <td>
            Example:
            <pre>@Deprecated</pre>
          </td>
        </tr>

        <tr>
          <td><span class="code">ignore</span></td>
          <td>
            Anything goes.
          </td>
        </tr>
      </table>
    </section>


    <section name="trailingArrayComma">
      <p>
        This property represents the policy for the styles for the trailing
        array comma. The following table describes the valid options:
      </p>

      <table summary="trailingArrayComma options">
        <tr>
          <td>Option</td>
          <td>Definition</td>
        </tr>

        <tr>
          <td><span class="code">always</span></td>
          <td>
            Example:
            <pre>@SuppressWarnings(value={"unchecked","unused",})</pre>
          </td>
        </tr>

        <tr>
          <td><span class="code">never</span></td>
          <td>
            Example:
            <pre>@SuppressWarnings(value={"unchecked","unused"})</pre>
          </td>
        </tr>

        <tr>
          <td><span class="code">ignore</span></td>
          <td>
            Anything goes.
          </td>
        </tr>
      </table>
    </section>

  </body>
</document>
